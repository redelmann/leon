package leon.annotation

import scala.annotation.StaticAnnotation

object cCode {

    /*
     * Allows the user to manually define the implementation for a C function.
     *
     * The required C99 include files should be listed in `includes`.
     *
     * Because the actual names of the function itself and its parameters
     * might be changed by GenC, the `code` representing the C implementation
     * is expressed as a function taking, in that order, the actual name
     * of the function (String) and its parameters (Seq[String]).
     *
     * The parameters type in the manual implementation should exactly
     * match the ones generated by GenC.
     *
     * For convenience the C implementation generated by `code` is represented
     * using a String and not an Abstract Syntax Tree. The user is responsible
     * to make sure the generated code is C99 compliant.
     *
     * Note that this annotation doesn't imply @extern but they can be
     * combined if needed.
     *
     * Example:
     * --------
     *
     *    // Print a 32-bit integer using the *correct*
     *    // format for printf in C99
     *    @cCode.function(
     *      includes = "inttypes.h" :: "stdio.h" :: Nil,
     *      code = { case (fun, x :: Nil) => s"""
     *        void $fun(int32_t $x) {
     *          printf("%"PRIi32, $x)
     *        }
     *        """
     *      }
     *    )
     *    def myprint(x: Int): Unit = {
     *      print(x)
     *    }
     *
     *
     * TODO in a later stage, when generics are supported, the instanciated type
     * should be given to `code` somehow.
     */
    @ignore
    class function(
        includes: Seq[String],
        code: PartialFunction[(String, Seq[String]), String]
    ) extends StaticAnnotation

}
