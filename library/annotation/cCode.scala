package leon.annotation

import scala.annotation.StaticAnnotation

object cCode {

    /*
     * Allow the user to define the implementation manually for a C function
     *
     * The required C99 include files should be listed in `includes`. The body
     * of the function is specified using `code` as follows: since the exact
     * unique names of the function and its parameters are not known beforehand,
     * the body is a function that takes as parameter a list of the names
     * corresponding, in that order, to the function name and its parameters.
     *
     * The types of the parameters should exactly match the one generated by
     * GenC.
     *
     * Example:
     * --------
     *
     *    // Print a 32-bit integer using the *correct*
     *    // format for printf in C99
     *    @cCode.function(
     *      includes = "inttypes.h" :: "stdio.h" :: Nil,
     *      code = case (fun, x :: Nil) => s"""
     *      void $fun(int32_t $x) {
     *        printf("%"PRIi32, $x)
     *      }
     *      """
     *    )
     *    def myprint(x: Int): Unit = {
     *      print(x)
     *    }
     *
     *
     * TODO in a later stage, when generics are supported, the instanciated type
     * should be given to `code` somehow.
     */
    @ignore
    class function(
        includes: List[String],
        code: PartialFunction[(String, List[String]), String]
    ) extends StaticAnnotation

}
